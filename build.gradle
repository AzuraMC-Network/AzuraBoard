plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.1'
}

group = 'cc.azuramc'
version = '1.2.5'

// Build type properties
ext {
    // Default use Java 8 build without Folia-related code
    // Use -PuseFolia=true to enable Folia support
    useFolia = project.hasProperty('useFolia') ? project.getProperty('useFolia').toBoolean() : false

    // Java version, based on whether Folia is enabled
    targetJavaVersion = useFolia ? 17 : 8
}

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "extendedclip"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        name = "papermc"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    if (useFolia) {
        // Java 17 build - including Folia API
        compileOnly 'dev.folia:folia-api:1.20.4-R0.1-SNAPSHOT'

    } else {
        // Java 8 build - using standard Spigot API
        compileOnly 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'
    }

    compileOnly 'me.clip:placeholderapi:2.11.6'
    implementation 'fr.mrmicky:fastboard:2.1.5'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

// Generate different SchedulerFactory implementation based on build type
tasks.register('generateSchedulerFactoryBukkit') {
    doLast {
        println "=== Generating factory for Bukkit build ==="
        def factoryDir = new File(project.projectDir, 'src/main/java/cc/azuramc/azuraboard/scheduler')
        def factoryFile = new File(factoryDir, 'GeneratedSchedulerFactory.java')

        factoryFile.text = """package cc.azuramc.azuraboard.scheduler;

import cc.azuramc.azuraboard.scheduler.impl.BukkitCompatImpl;

/**
 * GENERATED FILE - DO NOT EDIT
 * This file is automatically generated during build - BUKKIT VERSION
 */
public class GeneratedSchedulerFactory {
    
    public static SchedulerCompat createSchedulerImpl() {
        // Standard implementation for Java 8 build
        return new BukkitCompatImpl();
    }
}
"""
    }
}

tasks.register('generateSchedulerFactoryFolia') {
    doLast {
        println "=== Generating factory for Folia build ==="
        def factoryDir = new File(project.projectDir, 'src/main/java/cc/azuramc/azuraboard/scheduler')
        def factoryFile = new File(factoryDir, 'GeneratedSchedulerFactory.java')

        factoryFile.text = """package cc.azuramc.azuraboard.scheduler;

import cc.azuramc.azuraboard.scheduler.impl.FoliaCompatImpl;
import cc.azuramc.azuraboard.scheduler.impl.BukkitCompatImpl;

/**
 * GENERATED FILE - DO NOT EDIT
 * This file is automatically generated during build - FOLIA VERSION
 */
public class GeneratedSchedulerFactory {
    
    public static SchedulerCompat createSchedulerImpl() {
        try {
            Class.forName("io.papermc.paper.threadedregions.RegionizedServer");
            return new FoliaCompatImpl();
        } catch (ClassNotFoundException ignored) {}

        try {
            Class.forName("me.earthme.luminol.api.ThreadedRegion");
            return new FoliaCompatImpl();
        } catch (ClassNotFoundException ignored) {}

        return new BukkitCompatImpl();
    }
}
"""
    }
}

// Update SchedulerFactory file to use the generated factory implementation
tasks.register('updateSchedulerFactory') {
    doLast {
        def factoryFile = new File(project.projectDir, 'src/main/java/cc/azuramc/azuraboard/scheduler/SchedulerFactory.java')
        def content = factoryFile.text

        // Update instance creation logic
        def updatedContent = content.replaceAll(
            /instance = new BukkitCompatImpl\(\);/,
            'instance = GeneratedSchedulerFactory.createSchedulerImpl();'
        )

        factoryFile.text = updatedContent
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }

    // Generate factory class first
    dependsOn updateSchedulerFactory
}

// Source code filtering based on build type
sourceSets {
    main {
        java {
            if (!useFolia) {
                exclude 'cc/azuramc/azuraboard/scheduler/impl/FoliaCompatImpl.java'
            }
        }
    }
}

processResources {
    def props = [version: version, useFolia: useFolia]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    relocate 'fr.mrmicky.fastboard', 'cc.azuramc.azuraboard.base'

    // Set different archive name based on build type
    archiveClassifier.set(useFolia ? 'folia' : 'bukkit')
}

// Standard build task - for Java 8 without Folia
tasks.register('buildBukkit') {
    description = "Build standard version (Java 8)"
    group = 'build'

    doFirst {
        println "=== Setting up Standard Build Environment ==="
        // Force Folia to be disabled for this task
        project.ext.useFolia = false
        // Configure for Java 8
        project.ext.targetJavaVersion = 8
        java.sourceCompatibility = JavaVersion.VERSION_1_8
        java.targetCompatibility = JavaVersion.VERSION_1_8

        // Apply source filtering to exclude Folia code
        sourceSets.main.java.excludes.clear()
        sourceSets.main.java.excludes.add('cc/azuramc/azuraboard/scheduler/impl/FoliaCompatImpl.java')

        // Make sure the classifier is set correctly
        tasks.shadowJar.archiveClassifier.set('bukkit')
    }

    // Use the Bukkit-specific factory generator
    dependsOn generateSchedulerFactoryBukkit, updateSchedulerFactory

    doLast {
        println "=== Standard Version (Java 8) Built Successfully ==="
        println "Output file: build/libs/AzuraBoard-${version}-bukkit.jar"
    }

    // Run the shadow jar task after our configuration
    finalizedBy tasks.shadowJar
}

// Folia build task - for Java 17 with Folia support
tasks.register('buildFolia') {
    description = "Build Folia version (Java 17)"
    group = 'build'

    doFirst {
        println "=== Setting up Folia Build Environment ==="
        // Force Folia to be enabled for this task
        project.ext.useFolia = true
        // Configure for Java 17
        project.ext.targetJavaVersion = 17
        java.sourceCompatibility = JavaVersion.VERSION_17
        java.targetCompatibility = JavaVersion.VERSION_17

        // Ensure Java 17 is set for compilation
        tasks.compileJava.sourceCompatibility = '17'
        tasks.compileJava.targetCompatibility = '17'
        if (JavaVersion.current() < JavaVersion.VERSION_17) {
            tasks.compileJava.options.release = 17
        }

        // Remove source filtering to include Folia code
        sourceSets.main.java.excludes.clear()

        // Make sure the classifier is set correctly
        tasks.shadowJar.archiveClassifier.set('folia')
    }

    // Use the Folia-specific factory generator
    dependsOn generateSchedulerFactoryFolia, updateSchedulerFactory

    doLast {
        println "=== Folia Version (Java 17) Built Successfully ==="
        println "Output file: build/libs/AzuraBoard-${version}-folia.jar"
    }

    // Run the shadow jar task after our configuration
    finalizedBy tasks.clean, tasks.compileJava, tasks.shadowJar
}

// Task to clean and rebuild Folia version with clean state
tasks.register('cleanBuildFolia') {
    description = "Clean build the Folia version (Java 17)"
    group = 'build'

    dependsOn tasks.clean, 'buildFolia'
}

// Task to build all versions
tasks.register('buildAll') {
    description = "Build all versions (Standard and Folia)"
    group = 'build'

    doLast {
        println "=== Build Instructions ==="
        println "For Standard Version (Java 8): ./gradlew buildBukkit"
        println "For Folia Version (Java 17): ./gradlew buildFolia"
        println ""
        println "For clean Folia build: ./gradlew cleanBuildFolia"
        println ""
        println "The generated JAR files will be in the build/libs/ directory."
    }
}

// Add a help task to explain the build system
tasks.register('buildHelp') {
    description = "Show help for the build system"
    group = 'help'

    doLast {
        println """
=== AzuraBoard Build System Help ===

This project supports two build modes:

1. Standard Build (Java 8):
   - Does not include Folia-specific code
   - For regular Bukkit/Spigot/Paper servers
   - Command: ./gradlew buildBukkit
   - Output: build/libs/AzuraBoard-${version}-bukkit.jar

2. Folia Build (Java 17):
   - Includes Folia API integration
   - Command: ./gradlew buildFolia
   - Output: build/libs/AzuraBoard-${version}-folia.jar

3. Clean Folia Build (Java 17):
   - Cleans and builds Folia version
   - Command: ./gradlew cleanBuildFolia
   - Recommended for switching between build types

Note: When using the direct shadowJar task with -PuseFolia=true,
      make sure no previous builds have modified the configuration.
      It's safer to use the dedicated buildBukkit and buildFolia tasks.
"""
    }
}

